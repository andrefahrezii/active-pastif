version: "3.8"

services:
  # Database Service 1 (Master)
  db1:
    image: mariadb:10.5
    container_name: db1
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=mydatabase
      - MYSQL_REPLICATION_USER=repl_user
      - MYSQL_REPLICATION_PASSWORD=repl_password

    ports:
      - "3306:3306"
    volumes:
      - db1_data:/var/lib/mysql
      - ./db1_init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      - ./db_1my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network

  # Database Service 2 (Slave)
  db2:
    image: mariadb:10.5
    container_name: db2
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=mydatabase
      - MYSQL_REPLICATION_USER=repl_user
      - MYSQL_REPLICATION_PASSWORD=repl_password
      - MYSQL_MASTER_HOST=db1
      - MYSQL_MASTER_PORT=3306

    ports:
      - "3307:3306"
    volumes:
      - db2_data:/var/lib/mysql
      - ./db2_init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./db_2my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network

  # Backend Service 1
  backend1:
    image: node:14-alpine
    container_name: backend1
    working_dir: /app
    volumes:
      - ./backend:/app
      - ./logs/backend1:/var/log/app
      - ./logs:/var/log/app
    command: sh -c "npm install && node app.js"
    environment:
      - MYSQL_HOST_DB1=db1
      - MYSQL_HOST_DB2=db2
      - MYSQL_USER=root
      - MYSQL_PASSWORD=password
      - MYSQL_DB=mydatabase
    networks:
      - app-network
    depends_on:
      - db1
      - db2

  # Backend Service 2
  backend2:
    image: node:14-alpine
    container_name: backend2
    working_dir: /app
    volumes:
      - ./backend:/app
      - ./logs/backend2:/var/log/app
      - ./logs:/var/log/app
    command: sh -c "npm install && node app.js"
    environment:
      - MYSQL_HOST_DB1=db1
      - MYSQL_HOST_DB2=db2
      - MYSQL_USER=root
      - MYSQL_PASSWORD=password
      - MYSQL_DB=mydatabase

    networks:
      - app-network
    depends_on:
      - db1
      - db2

  # Nginx Load Balancer
  load_balancer:
    image: nginx:latest
    container_name: load_balancer
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app-network
    depends_on:
      - backend1
      - backend2

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.1
    container_name: kibana
    platform: linux/amd64
    ports:
      - "5601:5601"
    networks:
      - app-network
    depends_on:
      - elasticsearch

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.1
    container_name: logstash
    platform: linux/amd64
    ports:
      - "5044:5044"
      - "5001:5000"
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - app-network
    depends_on:
      - elasticsearch

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app-network

    # Filebeat
  filebeat:
    image: docker.elastic.co/beats/filebeat:7.10.1
    container_name: filebeat
    platform: linux/amd64
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/logs
    networks:
      - app-network
    depends_on:
      - backend1
      - backend2
      - logstash

volumes:
  esdata:
    driver: local
  db1_data:
  db2_data:

networks:
  app-network:
